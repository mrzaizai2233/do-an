<?php

namespace common\models;

use Yii;

/**
 * This is the model class for table "loaihang".
 *
 * @property integer $id
 * @property string $tenloaihang
 * @property string $code
 * @property string $created
 * @property string $updated
 * @property integer $parent
 * @property integer $stt
 * @property integer $trangthai
 *
 * @property Hanghoa[] $hanghoas
 * @property Loaihang[] $loaihangs
 */
class Loaihang extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'loaihang';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['tenloaihang'], 'required'],
            [['created', 'updated','stt','trangthai'], 'safe'],
            [['parent','stt'], 'integer'],
            [['tenloaihang', 'code'], 'string', 'max' => 100],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'tenloaihang' => 'Tên loại hàng',
            'code' => 'Mã',
            'created' => 'Ngày tạo',
            'updated' => 'Ngày sửa',
            'parent' => 'Danh mục cha',
            'stt' => 'Số thứ tự',
            'trangthai' => 'Trạng thái',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getLoaihang(){
        return Loaihang::find()->all();
    }
    public function getHanghoas()
    {
        return $this->hasMany(Hanghoa::className(), ['loaihang_id' => 'id']);
    }
    public function getLoaihangs()
    {
        return $this->hasMany($this::className(), ['parent' => 'id']);
    }
    public function beforeSave($insert)
    {
        $this->code=base::convertStr($this->tenloaihang);
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
    public function beforeDelete()
    {
        if(base::checkMutiLV($this->id)>0){
            $this->deleteMany($this);
        }

        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function deleteMany($datas){
        foreach ($datas->loaihangs as $index => $loaihang) {
            if($loaihang->loaihangs>0 ){
                    $this->deleteMany($loaihang);
            }
            $loaihang->delete();
        }
    }
}
